// Generated by *go generate* - DO NOT EDIT
/*
Copyright 2022. projectsveltos.io. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package crd

import (
	"context"

	"github.com/go-logr/logr"
	corev1 "k8s.io/api/core/v1"
	apiextensionsv1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/client-go/discovery"
	"k8s.io/client-go/dynamic"
	"k8s.io/client-go/dynamic/dynamicinformer"
	"k8s.io/client-go/informers"
	"k8s.io/client-go/rest"
	"k8s.io/client-go/restmapper"
	"k8s.io/client-go/tools/cache"
)

type ChangeType string

const (
	Add    ChangeType = "add"
	Delete ChangeType = "delete"
	Modify ChangeType = "modify"
)

type handler func(gvk *schema.GroupVersionKind, action ChangeType)

// WatchCustomResourceDefinition starts a watcher for CustomResourceDefinition.
// When new CRD is added/deleted/modified, invokes the passed handler
// Called must have RBAC to watch CustomResourceDefinition
func WatchCustomResourceDefinition(ctx context.Context, config *rest.Config,
	h handler, logger logr.Logger) {

	gvk := schema.GroupVersionKind{
		Group:   "apiextensions.k8s.io",
		Version: "v1",
		Kind:    "CustomResourceDefinition",
	}

	dcinformer, err := getDynamicInformer(&gvk, config)
	if err != nil {
		logger.Error(err, "Failed to get informer")
		return
	}

	runCRDInformer(ctx.Done(), dcinformer.Informer(), h, logger)
}

func getDynamicInformer(gvk *schema.GroupVersionKind, config *rest.Config) (informers.GenericInformer, error) {
	// Grab a dynamic interface that we can create informers from
	d, err := dynamic.NewForConfig(config)
	if err != nil {
		return nil, err
	}
	// Create a factory object that can generate informers for resource types
	factory := dynamicinformer.NewFilteredDynamicSharedInformerFactory(
		d,
		0,
		corev1.NamespaceAll,
		nil,
	)

	dc := discovery.NewDiscoveryClientForConfigOrDie(config)
	groupResources, err := restmapper.GetAPIGroupResources(dc)
	if err != nil {
		return nil, err
	}
	mapper := restmapper.NewDiscoveryRESTMapper(groupResources)

	mapping, err := mapper.RESTMapping(gvk.GroupKind(), gvk.Version)
	if err != nil {
		// getDynamicInformer is only called after verifying resource
		// is installed.
		return nil, err
	}

	resourceId := schema.GroupVersionResource{
		Group:    gvk.Group,
		Version:  gvk.Version,
		Resource: mapping.Resource.Resource,
	}

	informer := factory.ForResource(resourceId)
	return informer, nil
}

func runCRDInformer(stopCh <-chan struct{}, s cache.SharedIndexInformer, h handler, logger logr.Logger) {
	handlers := cache.ResourceEventHandlerFuncs{
		AddFunc: func(obj interface{}) {
			crd := &apiextensionsv1.CustomResourceDefinition{}
			err := runtime.DefaultUnstructuredConverter.
				FromUnstructured(obj.(*unstructured.Unstructured).UnstructuredContent(), crd)
			if err != nil {
				logger.Error(err, "could not convert obj to CustomResourceDefinition")
				return
			}
			for i := range crd.Spec.Versions {
				gvk := &schema.GroupVersionKind{
					Group:   crd.Spec.Group,
					Version: crd.Spec.Versions[i].Name,
					Kind:    crd.Spec.Names.Kind,
				}
				h(gvk, Add)
			}
		},
		DeleteFunc: func(obj interface{}) {
			crd := &apiextensionsv1.CustomResourceDefinition{}
			err := runtime.DefaultUnstructuredConverter.
				FromUnstructured(obj.(*unstructured.Unstructured).UnstructuredContent(), crd)
			if err != nil {
				logger.Error(err, "could not convert obj to CustomResourceDefinition")
				return
			}
			for i := range crd.Spec.Versions {
				gvk := &schema.GroupVersionKind{
					Group:   crd.Spec.Group,
					Version: crd.Spec.Versions[i].Name,
					Kind:    crd.Spec.Names.Kind,
				}
				h(gvk, Delete)
			}
		},
		UpdateFunc: func(oldObj, newObj interface{}) {
			crd := &apiextensionsv1.CustomResourceDefinition{}
			err := runtime.DefaultUnstructuredConverter.
				FromUnstructured(newObj.(*unstructured.Unstructured).UnstructuredContent(), crd)
			if err != nil {
				logger.Error(err, "could not convert obj to CustomResourceDefinition")
				return
			}
			for i := range crd.Spec.Versions {
				gvk := &schema.GroupVersionKind{
					Group:   crd.Spec.Group,
					Version: crd.Spec.Versions[i].Name,
					Kind:    crd.Spec.Names.Kind,
				}
				h(gvk, Modify)
			}
		},
	}
	s.AddEventHandler(handlers)
	s.Run(stopCh)
}
